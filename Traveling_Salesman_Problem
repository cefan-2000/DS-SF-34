Traveling Salesman Problem

NP-hard problem
   worst-case running time increases superpolynomially (but not exponentially) with the # of stops

Create a minimum spanning tree of the graph and then double all its edges. Then length of an optimal tour is a most twice the weight of a minimum spanning tree.

Linear Integer Program:

n = # of points at which to stop

x_ij = 1 if traveling from point i to point j

c_ij = cost to traveling from point i to point j

u_i = t if city i is visited in step t

Objective function:
min sum_i sum_j c_ij * x_ij   

Constraints:
sum_i (i<>j) x_ij = 1 (start from each city exactly once)

sum_j (i<>j) x_ij = 1 (end from each city exactly once)

u_i - u_j + n * x_ij <= n - 1  (exactly one circuit, not two circuits) for i<>j and 2 <= i <= n and 2 <= j <= n
